[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseBadRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "stripe_webhook",
        "importPath": "payments.views",
        "description": "payments.views",
        "isExtraImport": true,
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentViewSet",
        "importPath": "payments.views",
        "description": "payments.views",
        "isExtraImport": true,
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "stripe_webhook",
        "importPath": "payments.views",
        "description": "payments.views",
        "isExtraImport": true,
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentCreateView",
        "importPath": "payments.views",
        "description": "payments.views",
        "isExtraImport": true,
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Matter",
        "importPath": "matters.models",
        "description": "matters.models",
        "isExtraImport": true,
        "detail": "matters.models",
        "documentation": {}
    },
    {
        "label": "Matter",
        "importPath": "matters.models",
        "description": "matters.models",
        "isExtraImport": true,
        "detail": "matters.models",
        "documentation": {}
    },
    {
        "label": "Matter",
        "importPath": "matters.models",
        "description": "matters.models",
        "isExtraImport": true,
        "detail": "matters.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "payments.models",
        "description": "payments.models",
        "isExtraImport": true,
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "importPath": "payments.serializers",
        "description": "payments.serializers",
        "isExtraImport": true,
        "detail": "payments.serializers",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"CustomUser\",\n            fields=[\n                (",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    model = CustomUser\n    list_display = [\"email\", \"name\", \"surname\", \"is_staff\", \"is_active\"]\n    list_filter = [\"is_staff\", \"is_active\"]\n    search_fields = [\"email\", \"name\", \"surname\"]\n    ordering = [\"email\"]\n    exclude = (\"date_joined\",)\n    fieldsets = (\n        (None, {\"fields\": (\"email\", \"password\")}),\n        (",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"accounts\"",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserManager",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class CustomUserManager(BaseUserManager):\n    def create_user(self, email, username=None, password=None, **extra_fields):\n        if not email:\n            raise ValueError(\"The Email field must be set\")\n        email = self.normalize_email(email)\n        user = self.model(email=email, username=username, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, username=None, password=None, **extra_fields):",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class CustomUser(AbstractBaseUser, PermissionsMixin):\n    username = models.CharField(max_length=150, null=True)\n    email = models.EmailField(unique=True)\n    name = models.CharField(max_length=30)\n    surname = models.CharField(max_length=30)\n    phone_number = models.CharField(max_length=15)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(default=timezone.now)\n    groups = models.ManyToManyField(",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    class Meta:\n        model = CustomUser\n        fields = (\"email\", \"password\", \"name\", \"surname\", \"phone_number\")\n    def create(self, validated_data):\n        user = CustomUser.objects.create_user(\n            email=validated_data[\"email\"],\n            password=validated_data[\"password\"],\n            name=validated_data.get(\"name\"),",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True)\nclass UserProfileSerializer(serializers.ModelSerializer):\n    is_superuser = serializers.BooleanField(read_only=True)\n    is_staff = serializers.BooleanField(read_only=True)\n    class Meta:\n        model = CustomUser\n        fields = (\n            \"email\",",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserProfileSerializer(serializers.ModelSerializer):\n    is_superuser = serializers.BooleanField(read_only=True)\n    is_staff = serializers.BooleanField(read_only=True)\n    class Meta:\n        model = CustomUser\n        fields = (\n            \"email\",\n            \"name\",\n            \"surname\",\n            \"phone_number\",",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "ChangePasswordSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class ChangePasswordSerializer(serializers.Serializer):\n    old_password = serializers.CharField(required=True)\n    new_password = serializers.CharField(required=True)\nclass DeleteAccountSerializer(serializers.Serializer):\n    password = serializers.CharField(required=True)\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = [\"id\", \"email\", \"name\", \"surname\"]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "DeleteAccountSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class DeleteAccountSerializer(serializers.Serializer):\n    password = serializers.CharField(required=True)\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = [\"id\", \"email\", \"name\", \"surname\"]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = [\"id\", \"email\", \"name\", \"surname\"]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 5,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "CustomUser = get_user_model()\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True)\n    class Meta:\n        model = CustomUser\n        fields = (\"email\", \"password\", \"name\", \"surname\", \"phone_number\")\n    def create(self, validated_data):\n        user = CustomUser.objects.create_user(\n            email=validated_data[\"email\"],\n            password=validated_data[\"password\"],",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"register/\", UserRegistrationView.as_view(), name=\"register\"),\n    path(\"login/\", UserLoginView.as_view(), name=\"login\"),\n    path(\"profile/\", UserProfileView.as_view(), name=\"profile\"),\n    path(\n        \"change-password/\", ChangePasswordView.as_view(), name=\"change-password\"\n    ),  # noqa: E501\n    path(\n        \"delete-account/\", DeleteAccountView.as_view(), name=\"delete-account\"\n    ),  # noqa: E501",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "UserListView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserListView(generics.ListAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAdminUser]\nclass UserRegistrationView(generics.CreateAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserRegistrationSerializer\n    def perform_create(self, serializer):\n        user = serializer.save()\n        login(self.request, user)  # Log in user",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserRegistrationView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserRegistrationView(generics.CreateAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserRegistrationSerializer\n    def perform_create(self, serializer):\n        user = serializer.save()\n        login(self.request, user)  # Log in user\n        # Generate JWT-token\n        refresh = RefreshToken.for_user(user)\n        # Save or create a token if you use it as well (optional depending on your needs)\n        token, created = Token.objects.get_or_create(user=user)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserLoginView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserLoginView(APIView):\n    permission_classes = []\n    def post(self, request, *args, **kwargs):\n        serializer = UserLoginSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = authenticate(\n            email=serializer.validated_data[\"email\"],\n            password=serializer.validated_data[\"password\"],\n        )\n        if user is not None:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "UserProfileView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class UserProfileView(generics.RetrieveUpdateAPIView):\n    queryset = CustomUser.objects.all()\n    permission_classes = [IsAuthenticated]\n    serializer_class = UserProfileSerializer\n    def get_object(self):\n        return self.request.user\nclass ChangePasswordView(generics.UpdateAPIView):\n    serializer_class = ChangePasswordSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "ChangePasswordView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class ChangePasswordView(generics.UpdateAPIView):\n    serializer_class = ChangePasswordSerializer\n    permission_classes = [IsAuthenticated]\n    def get_object(self):\n        return self.request.user\n    def update(self, request, *args, **kwargs):\n        self.object = self.get_object()\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        if not self.object.check_password(serializer.data.get(\"old_password\")):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "DeleteAccountView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class DeleteAccountView(APIView):\n    permission_classes = [IsAuthenticated]\n    def delete(self, request, *args, **kwargs):\n        user = request.user\n        serializer = DeleteAccountSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        if not user.check_password(serializer.validated_data[\"password\"]):\n            return Response(\n                {\"password\": \"Incorrect password\"},\n                status=status.HTTP_400_BAD_REQUEST,  # noqa",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nCustomUser = get_user_model()\nclass UserListView(generics.ListAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAdminUser]\nclass UserRegistrationView(generics.CreateAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserRegistrationSerializer\n    def perform_create(self, serializer):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "CustomUser = get_user_model()\nclass UserListView(generics.ListAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAdminUser]\nclass UserRegistrationView(generics.CreateAPIView):\n    queryset = CustomUser.objects.all()\n    serializer_class = UserRegistrationSerializer\n    def perform_create(self, serializer):\n        user = serializer.save()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.asgi",
        "description": "backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.asgi",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.CustomUser\"\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\nif os.path.exists(\"env.py\"):\n    import env  # noqa F401\n# Use SQLite during Dvelopment\nif os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\":\n    # Use SQLite\n    DATABASES = {\n        \"default\": {",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nif os.path.exists(\"env.py\"):\n    import env  # noqa F401\n# Use SQLite during Dvelopment\nif os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\":\n    # Use SQLite\n    DATABASES = {\n        \"default\": {\n            \"ENGINE\": \"django.db.backends.sqlite3\",\n            \"NAME\": BASE_DIR / \"db.sqlite3\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\n# IP URL For development via mac on TV\nMY_IP_URL = os.getenv(\"MY_IP_URL\", \"http://localhost:8000/api\")\nparsed_url = urlparse(MY_IP_URL)\nip_host = f\"http://{parsed_url.hostname}:5173\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\"\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \".ngrok-free.app\", parsed_url.hostname]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MY_IP_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MY_IP_URL = os.getenv(\"MY_IP_URL\", \"http://localhost:8000/api\")\nparsed_url = urlparse(MY_IP_URL)\nip_host = f\"http://{parsed_url.hostname}:5173\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\"\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \".ngrok-free.app\", parsed_url.hostname]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "parsed_url",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "parsed_url = urlparse(MY_IP_URL)\nip_host = f\"http://{parsed_url.hostname}:5173\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\"\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \".ngrok-free.app\", parsed_url.hostname]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ip_host",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ip_host = f\"http://{parsed_url.hostname}:5173\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\"\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \".ngrok-free.app\", parsed_url.hostname]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]\nCSRF_TRUSTED_ORIGINS = [",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEBUG = os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\"\nALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \".ngrok-free.app\", parsed_url.hostname]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"127.0.0.1\", \"localhost\", \".ngrok-free.app\", parsed_url.hostname]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n    ip_host,\n]\nCORS_ALLOW_CREDENTIALS = True\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"allauth.account\",\n    \"allauth.socialaccount\",\n    \"dj_rest_auth\",\n    \"django.contrib.sites\",\n    \"django.contrib.contenttypes\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"allauth.account\",\n    \"allauth.socialaccount\",\n    \"dj_rest_auth\",\n    \"django.contrib.sites\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SITE_ID = 1\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ),\n}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.SessionAuthentication\",\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    ),\n}\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\n    \"ROTATE_REFRESH_TOKENS\": True,",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=30),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"BLACKLIST_AFTER_ROTATION\": True,\n    \"AUTH_HEADER_TYPES\": (\"Bearer\",),\n    \"AUTH_TOKEN_CLASSES\": (\"rest_framework_simplejwt.tokens.AccessToken\",),\n    \"AUTH_COOKIE\": \"access_token\",\n    \"AUTH_COOKIE_DOMAIN\": None,\n    \"AUTH_COOKIE_SECURE\": False,",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"none\"\nREST_USE_JWT = True\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_USE_JWT",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "REST_USE_JWT = True\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n# Use SQLite during Dvelopment and NEON Tech in Production\nif os.getenv(\"DJANGO_DEVELOPMENT\") == \"True\":\n    # Use SQLite\n    DATABASES = {\n        \"default\": {\n            \"ENGINE\": \"django.db.backends.sqlite3\",\n            \"NAME\": BASE_DIR / \"db.sqlite3\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Media Management\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Media Management\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nX_FRAME_OPTIONS = \"ALLOWALL\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Media Management\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nX_FRAME_OPTIONS = \"ALLOWALL\"\n# Default primary key field type",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Media Management\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nX_FRAME_OPTIONS = \"ALLOWALL\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Media Management\nMEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nX_FRAME_OPTIONS = \"ALLOWALL\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nX_FRAME_OPTIONS = \"ALLOWALL\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\nX_FRAME_OPTIONS = \"ALLOWALL\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "X_FRAME_OPTIONS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "X_FRAME_OPTIONS = \"ALLOWALL\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "urlpatterns = [\n    # path(\"\", TemplateView.as_view(template_name=\"index.html\")),\n    path(\"secure-admin/\", admin.site.urls),  # Admin Panel\n    path(\"api/accounts/\", include(\"accounts.urls\")),\n    path(\"api/matters/\", include(\"matters.urls\")),\n    path(\"api/auth/\", include(\"dj_rest_auth.urls\")),\n    path(\"api-auth/\", include(\"rest_framework.urls\")),\n    path(\"api/auth/registration/\", include(\"dj_rest_auth.registration.urls\")),\n    path(\n        \"api/auth/token/obtain/\",",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.wsgi",
        "description": "backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.wsgi",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "matters.migrations.0001_initial",
        "description": "matters.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Matter\",\n            fields=[\n                (",
        "detail": "matters.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "matters.migrations.0002_alter_matter_status",
        "description": "matters.migrations.0002_alter_matter_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"matters\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"matter\",\n            name=\"status\",\n            field=models.CharField(\n                choices=[",
        "detail": "matters.migrations.0002_alter_matter_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "matters.migrations.0003_alter_matterfile_file",
        "description": "matters.migrations.0003_alter_matterfile_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"matters\", \"0002_alter_matter_status\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"matterfile\",\n            name=\"file\",\n            field=models.FileField(\n                upload_to=\"matter_files/\",",
        "detail": "matters.migrations.0003_alter_matterfile_file",
        "documentation": {}
    },
    {
        "label": "MatterAdmin",
        "kind": 6,
        "importPath": "matters.admin",
        "description": "matters.admin",
        "peekOfCode": "class MatterAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"user\", \"title\", \"status\", \"created_at\"]\n    list_filter = [\"status\", \"created_at\", \"user\"]\n    search_fields = [\"user__email\", \"description\"]\n@admin.register(MatterFile)\nclass MatterFileAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"matter\", \"file\", \"uploaded_at\"]\n    search_fields = [\"file\", \"matter__title\"]",
        "detail": "matters.admin",
        "documentation": {}
    },
    {
        "label": "MatterFileAdmin",
        "kind": 6,
        "importPath": "matters.admin",
        "description": "matters.admin",
        "peekOfCode": "class MatterFileAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"matter\", \"file\", \"uploaded_at\"]\n    search_fields = [\"file\", \"matter__title\"]",
        "detail": "matters.admin",
        "documentation": {}
    },
    {
        "label": "MattersConfig",
        "kind": 6,
        "importPath": "matters.apps",
        "description": "matters.apps",
        "peekOfCode": "class MattersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"matters\"",
        "detail": "matters.apps",
        "documentation": {}
    },
    {
        "label": "Matter",
        "kind": 6,
        "importPath": "matters.models",
        "description": "matters.models",
        "peekOfCode": "class Matter(models.Model):\n    STATUS_CHOICES = [\n        (\"Pending\", \"Pending\"),\n        (\"Ongoing\", \"Ongoing\"),\n        (\"Completed\", \"Completed\"),\n        (\"Cancelled\", \"Cancelled\"),\n    ]\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"matters\"\n    )",
        "detail": "matters.models",
        "documentation": {}
    },
    {
        "label": "MatterFile",
        "kind": 6,
        "importPath": "matters.models",
        "description": "matters.models",
        "peekOfCode": "class MatterFile(models.Model):\n    matter = models.ForeignKey(Matter, on_delete=models.CASCADE, related_name=\"files\")\n    file = models.FileField(\n        upload_to=\"matter_files/\",\n        validators=[\n            FileExtensionValidator(\n                allowed_extensions=[\"pdf\", \"txt\", \"jpg\", \"png\"]\n            )\n        ],\n    )",
        "detail": "matters.models",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE_TOTAL",
        "kind": 5,
        "importPath": "matters.models",
        "description": "matters.models",
        "peekOfCode": "MAX_FILE_SIZE_TOTAL = 15 * 1024 * 1024  # Maximum files size 15 MB (Togehter) \nclass Matter(models.Model):\n    STATUS_CHOICES = [\n        (\"Pending\", \"Pending\"),\n        (\"Ongoing\", \"Ongoing\"),\n        (\"Completed\", \"Completed\"),\n        (\"Cancelled\", \"Cancelled\"),\n    ]\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"matters\"",
        "detail": "matters.models",
        "documentation": {}
    },
    {
        "label": "MatterFileSerializer",
        "kind": 6,
        "importPath": "matters.serializers",
        "description": "matters.serializers",
        "peekOfCode": "class MatterFileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = MatterFile\n        fields = [\"id\", \"file\", \"uploaded_at\"]\n        read_only_fields = [\"id\", \"uploaded_at\"]\nclass MatterCreateUpdateSerializer(serializers.ModelSerializer):\n    user = serializers.HiddenField(default=serializers.CurrentUserDefault())\n    new_files = serializers.ListField(\n        child=serializers.FileField(\n            validators=[",
        "detail": "matters.serializers",
        "documentation": {}
    },
    {
        "label": "MatterCreateUpdateSerializer",
        "kind": 6,
        "importPath": "matters.serializers",
        "description": "matters.serializers",
        "peekOfCode": "class MatterCreateUpdateSerializer(serializers.ModelSerializer):\n    user = serializers.HiddenField(default=serializers.CurrentUserDefault())\n    new_files = serializers.ListField(\n        child=serializers.FileField(\n            validators=[\n                FileExtensionValidator(\n                    allowed_extensions=[\"pdf\", \"txt\", \"jpg\", \"png\"],\n                    message=\"Filformat stöds inte! Endast PDF, TXT, JPG och PNG tillåtna.\",\n                )\n            ]",
        "detail": "matters.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "matters.urls",
        "description": "matters.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", MatterListCreateView.as_view(), name=\"matter-list-create\"),\n    path(\"<int:pk>/\", MatterRetrieveUpdateDestroyView.as_view(), name=\"matter-detail\"),\n]",
        "detail": "matters.urls",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrAdmin",
        "kind": 6,
        "importPath": "matters.views",
        "description": "matters.views",
        "peekOfCode": "class IsOwnerOrAdmin(permissions.BasePermission):\n    def has_object_permission(self, request, view, obj):\n        if request.user.is_staff or request.user.is_superuser:\n            return True\n        return (getattr(obj, \"user\", None) == request.user) or (\n            hasattr(obj, \"matter\") and obj.matter.user == request.user\n        )\nclass MatterListCreateView(generics.ListCreateAPIView):\n    \"\"\"\n    GET: List all Matters (owned by logged in user or ALL id admin)",
        "detail": "matters.views",
        "documentation": {}
    },
    {
        "label": "MatterListCreateView",
        "kind": 6,
        "importPath": "matters.views",
        "description": "matters.views",
        "peekOfCode": "class MatterListCreateView(generics.ListCreateAPIView):\n    \"\"\"\n    GET: List all Matters (owned by logged in user or ALL id admin)\n    POST: Create a new Matter + upload files in same request\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    serializer_class = MatterCreateUpdateSerializer\n    def get_queryset(self):\n        user = self.request.user\n        if user.is_staff or user.is_superuser:",
        "detail": "matters.views",
        "documentation": {}
    },
    {
        "label": "MatterRetrieveUpdateDestroyView",
        "kind": 6,
        "importPath": "matters.views",
        "description": "matters.views",
        "peekOfCode": "class MatterRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):\n    \"\"\"\n    GET: Retrieve a single Matter\n    PUT/PATCH: Update Matter + add/remove files in a single request\n    DELETE: Delete Matter (including all files)\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated, IsOwnerOrAdmin]\n    serializer_class = MatterCreateUpdateSerializer\n    def get_queryset(self):\n        user = self.request.user",
        "detail": "matters.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "payments.migrations.0001_initial",
        "description": "payments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"matters\", \"0003_alter_matterfile_file\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Payment\",\n            fields=[",
        "detail": "payments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "payments.migrations.0002_alter_payment_matter",
        "description": "payments.migrations.0002_alter_payment_matter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"matters\", \"0003_alter_matterfile_file\"),\n        (\"payments\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"payment\",\n            name=\"matter\",\n            field=models.ForeignKey(",
        "detail": "payments.migrations.0002_alter_payment_matter",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "payments.migrations.0003_alter_payment_matter",
        "description": "payments.migrations.0003_alter_payment_matter",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"matters\", \"0003_alter_matterfile_file\"),\n        (\"payments\", \"0002_alter_payment_matter\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"payment\",\n            name=\"matter\",\n            field=models.ForeignKey(",
        "detail": "payments.migrations.0003_alter_payment_matter",
        "documentation": {}
    },
    {
        "label": "PaymentAdmin",
        "kind": 6,
        "importPath": "payments.admin",
        "description": "payments.admin",
        "peekOfCode": "class PaymentAdmin(admin.ModelAdmin):\n    list_display = (\"id\", \"user\", \"amount\", \"status\", \"stripe_payment_id\", \"created_at\")\n    search_fields = (\"user__email\", \"stripe_payment_id\")\n    list_filter = (\"status\", \"created_at\")",
        "detail": "payments.admin",
        "documentation": {}
    },
    {
        "label": "PaymentsConfig",
        "kind": 6,
        "importPath": "payments.apps",
        "description": "payments.apps",
        "peekOfCode": "class PaymentsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"payments\"",
        "detail": "payments.apps",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "payments.models",
        "description": "payments.models",
        "peekOfCode": "class Payment(models.Model):\n    STATUS_CHOICES = [\n        (\"pending\", \"Pending\"),\n        (\"paid\", \"Paid\"),\n        (\"failed\", \"Failed\"),\n    ]\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name=\"payments\"\n    )\n    matter = models.ForeignKey(",
        "detail": "payments.models",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "kind": 6,
        "importPath": "payments.serializers",
        "description": "payments.serializers",
        "peekOfCode": "class PaymentSerializer(serializers.ModelSerializer):\n    matter_title = serializers.CharField(source=\"matter.title\", read_only=True)\n    user_email = serializers.EmailField(source=\"user.email\", read_only=True)\n    class Meta:\n        model = Payment\n        fields = [\n            \"id\",\n            \"user\",\n            \"matter\",\n            \"amount\",",
        "detail": "payments.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "payments.urls",
        "description": "payments.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"webhook/\", stripe_webhook, name=\"stripe_webhook\"),\n    path(\"create/<int:matter_id>/\", PaymentCreateView.as_view(), name=\"create_payment\"),\n]\n# 2) DRF Router approach (concise, automatically creates list/retrieve/etc.)\nrouter = DefaultRouter()\nrouter.register(r\"\", PaymentViewSet, basename=\"payment\")\n# Combine both sets of URL patterns\nurlpatterns += router.urls",
        "detail": "payments.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "payments.urls",
        "description": "payments.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r\"\", PaymentViewSet, basename=\"payment\")\n# Combine both sets of URL patterns\nurlpatterns += router.urls",
        "detail": "payments.urls",
        "documentation": {}
    },
    {
        "label": "PaymentCreateView",
        "kind": 6,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "class PaymentCreateView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n    def post(self, request, matter_id, *args, **kwargs):\n        if not request.user.is_staff:\n            raise PermissionDenied(\"Endast admin kan skapa betalningar.\")\n        amount = request.data.get(\"amount\")\n        if not amount:\n            return Response(\n                {\"error\": \"Belopp är obligatoriskt.\"},\n                status=status.HTTP_400_BAD_REQUEST,",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "IsAdminOrReadOwn",
        "kind": 6,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "class IsAdminOrReadOwn(permissions.BasePermission):\n    def has_permission(self, request, view):\n        if request.user.is_staff:\n            return True\n        return request.method in permissions.SAFE_METHODS\n    def has_object_permission(self, request, view, obj):\n        if request.user.is_staff:\n            return True\n        return obj.user == request.user\nclass PaymentViewSet(viewsets.ModelViewSet):",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "PaymentViewSet",
        "kind": 6,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "class PaymentViewSet(viewsets.ModelViewSet):\n    serializer_class = PaymentSerializer\n    permission_classes = [IsAuthenticated]\n    def get_queryset(self):\n        if self.request.user.is_staff:\n            return Payment.objects.all()\n        return Payment.objects.filter(user=self.request.user)\n    @action(detail=True, methods=[\"post\"], permission_classes=[IsAuthenticated])\n    def create_checkout_session(self, request, pk=None):\n        payment = self.get_object()",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "stripe_webhook",
        "kind": 2,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "def stripe_webhook(request):\n    print(\"Webhook hit!\")\n    payload = request.body\n    sig_header = request.headers.get(\"Stripe-Signature\")\n    try:\n        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)\n        print(f\"Webhook event type: {event['type']}\")\n    except ValueError:\n        print(\"Invalid payload\")\n        return HttpResponseBadRequest(\"Invalid payload\")",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "handle_checkout_session_completed",
        "kind": 2,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "def handle_checkout_session_completed(session):\n    stripe_payment_id = session.get(\"payment_intent\")\n    user_id = session.get(\"client_reference_id\")\n    matter_id = session.get(\"metadata\", {}).get(\"matter_id\")\n    user = CustomUser.objects.filter(id=user_id).first()\n    matter = Matter.objects.filter(id=matter_id).first()\n    if not user or not matter:\n        print(\"No user or matter available to create payment.\")\n        return\n    payment, created = Payment.objects.get_or_create(",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "stripe.api_key",
        "kind": 5,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "stripe.api_key = os.getenv(\"STRIPE_SECRET_KEY\")\nendpoint_secret = os.getenv(\"STRIPE_WEBHOOK_SECRET\")\n@csrf_exempt\ndef stripe_webhook(request):\n    print(\"Webhook hit!\")\n    payload = request.body\n    sig_header = request.headers.get(\"Stripe-Signature\")\n    try:\n        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)\n        print(f\"Webhook event type: {event['type']}\")",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "endpoint_secret",
        "kind": 5,
        "importPath": "payments.views",
        "description": "payments.views",
        "peekOfCode": "endpoint_secret = os.getenv(\"STRIPE_WEBHOOK_SECRET\")\n@csrf_exempt\ndef stripe_webhook(request):\n    print(\"Webhook hit!\")\n    payload = request.body\n    sig_header = request.headers.get(\"Stripe-Signature\")\n    try:\n        event = stripe.Webhook.construct_event(payload, sig_header, endpoint_secret)\n        print(f\"Webhook event type: {event['type']}\")\n    except ValueError:",
        "detail": "payments.views",
        "documentation": {}
    },
    {
        "label": "os.environ[\"DJANGO_DEVELOPMENT\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"DJANGO_DEVELOPMENT\"] = \"True\"\n# Url via IP address\nos.environ[\"MY_IP_URL\"] = \"http://192.168.1.21:8000/api\"\nos.environ[\"SECRET_KEY\"] = \"jur1d!qs3cr33t\"\nos.environ[\"DATABASE_URL\"] = (\n    \"postgresql://neondb_owner:AHfpI30mECtL@ep-shy-bread-a2p1leir.eu-central-1.aws.neon.tech/neondb?sslmode=require\"\n)\n# Stripe\nos.environ[\"STRIPE_SECRET_KEY\"] = (\n    \"sk_test_51QkglZHBUlbEovBUJrQ7GQtolUvDPkQWFqzuYaB4Ts4Ln51ud4D2XYb9amhuWJa2yuqLDzCLBrQ9nl81dAmUCK2H00H6pQZmkN\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"MY_IP_URL\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"MY_IP_URL\"] = \"http://192.168.1.21:8000/api\"\nos.environ[\"SECRET_KEY\"] = \"jur1d!qs3cr33t\"\nos.environ[\"DATABASE_URL\"] = (\n    \"postgresql://neondb_owner:AHfpI30mECtL@ep-shy-bread-a2p1leir.eu-central-1.aws.neon.tech/neondb?sslmode=require\"\n)\n# Stripe\nos.environ[\"STRIPE_SECRET_KEY\"] = (\n    \"sk_test_51QkglZHBUlbEovBUJrQ7GQtolUvDPkQWFqzuYaB4Ts4Ln51ud4D2XYb9amhuWJa2yuqLDzCLBrQ9nl81dAmUCK2H00H6pQZmkN\"\n)\nos.environ[\"STRIPE_PUBLIC_KEY\"] = (",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"SECRET_KEY\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"SECRET_KEY\"] = \"jur1d!qs3cr33t\"\nos.environ[\"DATABASE_URL\"] = (\n    \"postgresql://neondb_owner:AHfpI30mECtL@ep-shy-bread-a2p1leir.eu-central-1.aws.neon.tech/neondb?sslmode=require\"\n)\n# Stripe\nos.environ[\"STRIPE_SECRET_KEY\"] = (\n    \"sk_test_51QkglZHBUlbEovBUJrQ7GQtolUvDPkQWFqzuYaB4Ts4Ln51ud4D2XYb9amhuWJa2yuqLDzCLBrQ9nl81dAmUCK2H00H6pQZmkN\"\n)\nos.environ[\"STRIPE_PUBLIC_KEY\"] = (\n    \"pk_test_51QkglZHBUlbEovBU0W2y8Q118rCEDbzA32QYflG54NkvaxhFyqnI7LRuY5sfiU6v8SSnrTeVxgmUzJXMHeQzczqP006F3iVQ7Z\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"DATABASE_URL\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"DATABASE_URL\"] = (\n    \"postgresql://neondb_owner:AHfpI30mECtL@ep-shy-bread-a2p1leir.eu-central-1.aws.neon.tech/neondb?sslmode=require\"\n)\n# Stripe\nos.environ[\"STRIPE_SECRET_KEY\"] = (\n    \"sk_test_51QkglZHBUlbEovBUJrQ7GQtolUvDPkQWFqzuYaB4Ts4Ln51ud4D2XYb9amhuWJa2yuqLDzCLBrQ9nl81dAmUCK2H00H6pQZmkN\"\n)\nos.environ[\"STRIPE_PUBLIC_KEY\"] = (\n    \"pk_test_51QkglZHBUlbEovBU0W2y8Q118rCEDbzA32QYflG54NkvaxhFyqnI7LRuY5sfiU6v8SSnrTeVxgmUzJXMHeQzczqP006F3iVQ7Z\"\n)",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"STRIPE_SECRET_KEY\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"STRIPE_SECRET_KEY\"] = (\n    \"sk_test_51QkglZHBUlbEovBUJrQ7GQtolUvDPkQWFqzuYaB4Ts4Ln51ud4D2XYb9amhuWJa2yuqLDzCLBrQ9nl81dAmUCK2H00H6pQZmkN\"\n)\nos.environ[\"STRIPE_PUBLIC_KEY\"] = (\n    \"pk_test_51QkglZHBUlbEovBU0W2y8Q118rCEDbzA32QYflG54NkvaxhFyqnI7LRuY5sfiU6v8SSnrTeVxgmUzJXMHeQzczqP006F3iVQ7Z\"\n)\nos.environ[\"STRIPE_WEBHOOK_SECRET\"] = \"whsec_Uut4oqT73sjQ09WnU4YHZ8Gn2vPPb23D\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"STRIPE_PUBLIC_KEY\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"STRIPE_PUBLIC_KEY\"] = (\n    \"pk_test_51QkglZHBUlbEovBU0W2y8Q118rCEDbzA32QYflG54NkvaxhFyqnI7LRuY5sfiU6v8SSnrTeVxgmUzJXMHeQzczqP006F3iVQ7Z\"\n)\nos.environ[\"STRIPE_WEBHOOK_SECRET\"] = \"whsec_Uut4oqT73sjQ09WnU4YHZ8Gn2vPPb23D\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "os.environ[\"STRIPE_WEBHOOK_SECRET\"]",
        "kind": 5,
        "importPath": "env",
        "description": "env",
        "peekOfCode": "os.environ[\"STRIPE_WEBHOOK_SECRET\"] = \"whsec_Uut4oqT73sjQ09WnU4YHZ8Gn2vPPb23D\"",
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"backend.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]